"
"NeoBundle Scripts-----------------------------
if has('vim_starting')
    if &compatible
        set nocompatible               " Be iMproved
    endif

    " Required:
    set runtimepath+=/Users/leo/.nvim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('/Users/leo/.nvim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" --------- Dependencies --------- "
NeoBundle 'Shougo/vimproc'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimproc', {
            \ 'build' : {
            \     'windows' : 'make -f make_mingw32.mak',
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'unix' : 'make -f make_unix.mak',
            \    },
            \ }

NeoBundle 'Shougo/unite-outline'
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'MarcWeber/vim-addon-mw-utils'
NeoBundle 'xolox/vim-misc'
NeoBundle 'tpope/vim-eunuch'

" --------- Themes --------- "
"256
NeoBundle 'Leotomas/vim-atom-dark'
NeoBundle 'endel/vim-github-colorscheme'
NeoBundle 'chriskempson/base16-vim'

"GUI
NeoBundle 'farfanoide/vim-facebook'

" --------- Vim improvements --------- "
NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'ryanoasis/vim-devicons'
"  Motions
NeoBundle 'rhysd/clever-f.vim'
NeoBundle 'bkad/CamelCaseMotion'
"Buffers
NeoBundle 'vim-scripts/BufOnly.vim'
NeoBundle 'qpkorr/vim-bufkill'
"File Management
NeoBundle 'ctrlpvim/ctrlp.vim'
" autoclose tags
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'godlygeek/tabular'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'Shougo/deoplete.nvim'
NeoBundle 'henrik/vim-indexed-search'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'docunext/closetag.vim'
NeoBundle 'benekastah/neomake'
NeoBundle 'tpope/vim-surround'
NeoBundle 'vim-scripts/colorizer'
NeoBundle 'dkprice/vim-easygrep'
NeoBundle 'junegunn/vim-easy-align'
NeoBundle 'mileszs/ack.vim'

" --------- PHP --------- "
NeoBundleLazy '2072/PHP-Indenting-for-VIm', {'autoload':{'filetypes':['php']}}
NeoBundle 'paulyg/Vim-PHP-Stuff', {'autoload':{'filetypes':['php']}}
NeoBundle 'arnaud-lb/vim-php-namespace', {'autoload':{'filetypes':['php']}}
NeoBundle 'mikehaertl/pdv-standalone'
NeoBundle 'shawncplus/phpcomplete.vim'
NeoBundle 'm2mdas/phpcomplete-extended'

" --------- HTML / Front --------- "
NeoBundle 'bonsaiben/bootstrap-snippets'
NeoBundle 'xsbeats/vim-blade'
NeoBundle 'othree/html5.vim'

" --------- Writing / Prise de note --------- "
NeoBundle 'mkitt/markdown-preview.vim'
NeoBundle 'junegunn/goyo.vim'
NeoBundle 'reedes/vim-pencil'

" --------- JS --------- "
NeoBundleLazy 'jelera/vim-javascript-syntax', {'autoload':{'filetypes':['javascript']}}
NeoBundleLazy 'vim-scripts/JavaScript-Indent', {'autoload':{'filetypes':['javascript']}}
NeoBundle 'carlitux/deoplete-ternjs', { 'build': { 'mac': 'npm install -g tern', 'unix': 'npm install -g tern' }}

" --------- Vue --------- "
NeoBundle 'posva/vim-vue'

" --------- Ansible --------- "
NeoBundle 'pearofducks/ansible-vim'
NeoBundle 'chase/vim-ansible-yaml'

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------

set rtp+=~/.fzf
let g:enable_bold_font = 1
set bg=dark
colorscheme atom-dark

if has('gui_running')
    set guioptions-=e
    colorscheme atom-dark
    set guifont=Fira_Mono:h12
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left hand scroll bar
endif

if has("nvim")
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
set t_Co=256
filetype on
syntax on
set wrap
set ignorecase
set smartcase
set iskeyword-=_
set hlsearch
set nonumber
set showmode
" toujours afficher la statusline
set laststatus=2
" set clipboard=unnamed
set linebreak
set linespace=10
set wildmenu
set wildmode=longest,list,full
set wildignore+=*/vendor/**
set wildignore+=*/resources/assets/bower/**
set wildignore+=*/node_modules/**
set wildignore+=*/storage/**
set scrolloff=3
set incsearch
set tabstop=4
set shiftwidth=4
set mouse=a
set expandtab
set autoindent
set copyindent
set backspace=indent,eol,start
highlight Search cterm=underline
set visualbell
set noerrorbells
set hidden
set history=1000
set undolevels=1000
set title
set nobackup
set foldcolumn=1
" show partial commands in cmd
set showcmd
set regexpengine=0
" Create split below
set splitbelow
set splitright
set completeopt=longest,menuone

"Make vim faster
let loaded_matchparent=1 " Don't load matchit.vim (paren/bracket matching)
set nocursorcolumn      " Don't paint cursor column
set lazyredraw          " Wait to redraw
set nocursorline
set scrolljump=8        " Scroll 8 lines at a time at bottom/top
let html_no_rendering=1 " Don't render italic, bold, links in HTML"

"stop using escape guys
imap jj <esc>

let mapleader = ","
let g:mapleader = ","

"leader save & quit
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>
cmap w!! w !sudo tee % >/dev/null
" Create and edit file in the current dir
nmap :ed :edit %:p:h/

" close all splits except the one focused
nmap <leader>o :only<cr>

" no more swaps in project dir
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

"set tags path
set tags+=./tags;/,./TAGS;/ " Recurse up the directory tree until finding a tags file
set tags+=./tags.vendor;/ " Add tag files for vendor dependencies, again with recursion up the tree

"Disables arrow keys in insert mode
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>

" remap les arrow keys sur resize des splits
nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>

" --------- Motions --------- "
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" --------- CTRLP --------- "
"permet de caler ctrpl sur le .gitignore
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_match_window = 'top,max:10,results:10,order:ttb'
nmap <leader>p :CtrlP<cr>
nmap <leader><space> :CtrlPBuffer<cr>
nmap <leader>t :CtrlPTag<cr>
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|.git\|bower_components\'

nmap <leader>f :Unite outline -start-insert<cr>
"navigation with C-j C-k in unite insert mode
imap <buffer> <C-j>   <Plug>(unite_select_next_line)
imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']

"Removing trailing spaces on save
autocmd BufWritePre * :%s/\s\+$//e

" --------- SEARCH CONFIG --------- "
nmap <silent> <leader>/ :nohlsearch<CR>

" --------- PHP CONF --------- "
"Insert current namespace according to PSR-0
inoremap \pn <C-R>=expand("%:p:h:s?.*\/[^A-Z]\\+\\C??:gs?/?\\?")<CR>
"PHP Refactor
let g:php_refactor_command='php ~/dotfiles/refactor.phar'
"Build PHP tags on save
abbrev genTags !ctags -R --filter-terminator=php --exclude=node_modules  --exclude=vendor/phpunit --exclude=vendor/phpdocumentor --exclude=vendor/maximebf --exclude=storage  --exclude=bower --exclude=resources/assets/bower

autocmd BufWritePost, BufRead *.php :DoQuietly ctags -R --filter-terminator=php --exclude=node_modules  --exclude=vendor/phpunit --exclude=vendor/phpdocumentor --exclude=vendor/maximebf --exclude=storage  --exclude=bower --exclude=resources/assets/bower

" PHP-Vim-Namespace configuration and key-mappings
autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>
autocmd FileType php noremap <Leader>e :call PhpExpandClass()<CR>

" Function for ordering PHP use statements
function! OrderUseStatements ()
    " Save our undo file so that we can restore it after this function runs
    " This allows us to run this function without it being part of the history
    let tmpundofile = tempname()
    execute 'wundo! '. tmpundofile

    " Grab our cursor's current position
    let original_position = winsaveview()

    " Set our cursor position to the top so we can normalize our search results
    call setpos('.', [0, 0, 0, 0])

    " Search for our first and last use statements
    let first_use = search('\(^\|\r\|\n\)\s*use \(.\{-}\)\_s*;', 'n')
    let last_use = search('use \(.\{-}\)\_s*;\(\r\|\n\)*\([^use]\)', 'n')

    " Define our sort range
    let sort_range = first_use . ',' . last_use

    " Order our use statements based on our sort range
    execute sort_range . 'sort'

    " Restore our original cursor position
    call winrestview(original_position)

    " Restore our undo history
    silent! execute 'rundo ' . tmpundofile
    call delete(tmpundofile)
endfunction

" Automaticaly order `use` statements on save
autocmd FileType php autocmd BufWritePre <buffer> call OrderUseStatements()

"PHP Indent Options
let g:PHP_autoformatcomment = 1 " Format comments automatically
let g:PHP_vintage_case_default_indent = 1 " Use the older style of switch/case indentation

"PDV Conf
nnoremap <leader>d :call PhpDocSingle()<CR>
vnoremap <leader>d :call PhpDocRange()<CR>
let g:pdv_cfg_Author = 'Leo TOMAS <leotomas@sefima.com>'

" --------- LARAVEL --------- "
abbrev lmm !php artisan make:model
abbrev lmc !php artisan make:controller
abbrev lmmig !php artisan make:migration
abbrev lms !php artisan make:seed
abbrev lsc !php artisan db:seed --class=  --force -vvv <Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
abbrev langjs !gulp langJs

"go to definition hitting leader + tab in esc mode
nnoremap <leader><Tab> <C-]>

"circle buffer avec tab
:nnoremap <Tab> :bnext<CR>
:nnoremap <S-Tab> :bprevious<CR>
"fermer un buffer
nmap <leader>x :BD<cr>

"indent whole file and go back to current position
nnoremap <leader>i mzgg=G`z<cr>

"align array arrows with tabularize
vmap <leader>a :Tab /=><cr>

"Nerd Tree Toggle conf
map <C-b> :NERDTreeToggle<CR>
let NERDTreeIgnore=['^tags$[[file]]', '^tags\.vendor$[[file]]']

" --------- Built-in statusline --------- "
 set statusline=%<%f\ %h%m%r%=%{fugitive#statusline()}\ \ %-14.(%l,%c%V%)\%p%%

" --------- Completion --------- "
autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP
autocmd FileType php let php_sql_query=1
autocmd FileType php let php_htmlInStrings=1

" --------- Vdebug --------- "
"Vdebug conf
abbrev debugon let g:vdebug_options['port']=10000

"Autocomplete css classes
autocmd FileType css,scss,sass,scss setlocal iskeyword=@,48-57,_,-,?,!,192-255

" --------- Writing / Prise de note --------- "
"Conf de Pencil Mode (mode écriture)
let g:pencil#wrapModeDefault = 'soft'
augroup pencil
    autocmd!
    autocmd FileType markdown,mkd call pencil#init()
    autocmd FileType text         call pencil#init()
augroup END

" --------- Deoplete--------- "
let g:deoplete#enable_at_startup = 1
let g:deoplete#disable_auto_complete = 0
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP

" --------- Vue Files Indent--------- "
au BufRead,BufNewFile *.vue set filetype=html
"abbrev to quick switch between filetypes
abbrev sfth set filetype=html
abbrev sftjs set filetype=javascript
abbrev sftv set filetype=vue
abbrev sftb set filetype=blade
abbrev sftp set filetype=php
"create file in current doc folder
abbrev e% e %:h/

" --------- NeoSnippet conf --------- "
let g:neosnippet#snippets_directory="~/dotfiles/nvim/snippets"
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)


