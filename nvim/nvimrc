"
"NeoBundle Scripts-----------------------------
if has('vim_starting')
    if &compatible
        set nocompatible               " Be iMproved
    endif

    " Required:
    set runtimepath+=/Users/leo/.nvim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('/Users/leo/.nvim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Add or remove your Bundles here:
" NeoBundle 'Shougo/vimproc'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimproc', {
            \ 'build' : {
            \     'windows' : 'make -f make_mingw32.mak',
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'unix' : 'make -f make_unix.mak',
            \    },
            \ }
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'MarcWeber/vim-addon-mw-utils'

"Git
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'mattn/gist-vim', {'depends': 'mattn/webapi-vim'}

"Themes
NeoBundle 'gosukiwi/vim-atom-dark'
"UI
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'bling/vim-airline'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'milkypostman/vim-togglelist'

"Multi Language
NeoBundle 'Raimondi/delimitMate'
"  NeoBundle 'scrooloose/syntastic'
" NeoBundle 'joonty/vim-phpqa'
NeoBundle 'godlygeek/tabular'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'xolox/vim-easytags'
NeoBundle 'xolox/vim-misc'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'vim-task-org'
NeoBundle 'terryma/vim-multiple-cursors'

"PHP
" NeoBundle 'vim-php/vim-php-refactoring'
NeoBundle 'adoy/vim-php-refactoring-toolbox'
NeoBundle 'Rican7/php-doc-modded'
NeoBundle '2072/PHP-Indenting-for-VIm'
NeoBundle 'm2mdas/phpcomplete-extended'
NeoBundle 'm2mdas/phpcomplete-extended-laravel'
NeoBundle 'paulyg/Vim-PHP-Stuff'
" NeoBundle 'vim-php/tagbar-phpctags.vim'
NeoBundle 'arnaud-lb/vim-php-namespace'

"Autocomplete
" NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Valloric/YouCompleteMe'
" NeoBundle 'ervandew/supertab'
" NeoBundle 'othree/vim-autocomplpop'
" NeoBundle 'eparreno/vim-l9'

"Additional
NeoBundle 'tpope/vim-surround'
NeoBundle 'joonty/vim-taggatron'

"Snippets
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'bonsaiben/bootstrap-snippets'
"
"HTML
NeoBundle 'mattn/emmet-vim'

"Search 
NeoBundle 'mileszs/ack.vim'
NeoBundle 'gilsondev/searchtasks.vim'

" Laravel
NeoBundle 'xsbeats/vim-blade'

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------

"Nvim true colors
let macvim_skip_colorscheme=1
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set t_Co=256
filetype on
syntax on
set nowrap
set ignorecase
set smartcase
set number
set showmode
set guifont=Roboto_Mono_For_Powerline:h10
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
set linespace=4
set wildmenu
set wildmode=longest,list,full
set wildignore+=*/vendor/**
set wildignore+=*/resources/assets/bower/**
set wildignore+=*/node_modules/**
set wildignore+=*/storage/**
set wildignore+=*/.phpcomplete/**
set wildignore+=*/.phpcomplete_extended/**
set scrolloff=3
set cursorline
set ruler
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set copyindent
set backspace=indent,eol,start
highlight Search cterm=underline
set visualbell
set noerrorbells
set hidden
set history=1000
set undolevels=1000
set title
set nobackup
set noswapfile
" show partial commands in cmd
set showcmd
set regexpengine=0
" Create split below
set splitbelow
set splitright
set completeopt=longest,menuone


"stop using escape guys
imap jj <esc>

"Simple paste in insert mode
imap <C-v> <Esc><C-v>a

"colorscheme
colorscheme atom-dark-256

let mapleader = ","
let g:mapleader = ","

"leader save & quit
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>
" close all splits except the one focused
nmap <leader>o :only<cr>
"set tags path
set tags+=./tags;/,./TAGS;/ " Recurse up the directory tree until finding a tags file
set tags+=./tags.vendor;/ " Add tag files for vendor dependencies, again with recursion up the tree

"Git Wrapper
noremap <leader>gs :Gstatus<cr>
noremap <leader>gw :Gwrite<cr>
noremap <leader>gp :Gpush<cr>
noremap <leader>g. :!git add .<cr>

"Disables arrow keys in insert mode
noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>

" remap les arrow keys sur resize des splits
nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>

let g:ctrlp_working_path_mode = 'r'

" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>
nmap <leader>b :CtrlPBuffer<cr>
nmap <leader>t :CtrlPTag<cr>

"Laravel Specific
"Abbrevs
abbrev lmm !php artisan make:model
abbrev lmc !php artisan make:controller
abbrev lmmig !php artisan make:migration
abbrev lms !php artisan make:seed 
abbrev lsc !php artisan db:seed --class=  --force -vvv <Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>


"auto remove trailing spaces on save with php files
autocmd BufWritePre *.php :%s/\s\+$//e

" search is a bitch
nmap <silent> ,/ :nohlsearch<CR>

"when you forget to sudo
cmap w!! w !sudo tee % >/dev/null

"Insert current namespace according to PSR-0
inoremap \pn <C-R>=expand("%:p:h:s?.*\/[^A-Z]\\+\\C??:gs?/?\\?")<CR>

" Create and edit file in the current dir
nmap :ed :edit %:p:h/

"go to definition hitting leader + tab in esc mode
nnoremap <leader><Tab> <C-]>

"circle buffer avec tab
:nnoremap <Tab> :bnext<CR>
:nnoremap <S-Tab> :bprevious<CR>
nmap <leader>x :bd<cr>

"indent whole file and go back to current position
nnoremap <leader>i mzgg=G`z<cr> 

"align array arrows with tabularize 
vmap <leader>a :Tab /=><cr> 


"CTRLP conf
            \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
            \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
            \}

"toggle tagbar
map <leader>f :TagbarToggle<CR>

"Nerd Tree Toggle conf
map <C-b> :NERDTreeToggle<CR>
let NERDTreeIgnore=['^tags$[[file]]', '^tags\.vendor$[[file]]']

"Airline conf
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tagbar#enabled = 1
let g:airline_powerline_fonts=1

"PHP Refactor
let g:php_refactor_command='php ~/dotfiles/refactor.phar'

"PHP Doc config 
inoremap <leader>d :call PhpDocSingle()<CR>i 
nnoremap <leader>d :call PhpDocSingle()<CR> 
vnoremap <leader>d :call PhpDocRange()<CR> 

"Snippets Conf
let g:UltiSnipsExpandTrigger="<c-j>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsListSnippets="<c-k>"

" autocmd BufRead,BufNewFile *.blade.php set filetype=html
autocmd FileType blade UltiSnipsAddFiletypes html
autocmd FileType blade UltiSnipsAddFiletypes php

"Syntastic Options
set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_auto_loc_list = 1 " Automatically open and close the location list
let g:syntastic_php_checkers = ['php', 'phpcs'] " PHP Linter, PHP Code Sniffer, PHP Mess Detector
let g:syntastic_php_phpcs_post_args = "--standard=PSR2" " Use the PSR-2 standard for PHP Code Sniffer
let g:syntastic_json_checkers = ['jsonlint'] " Use JSON linter
let g:syntastic_go_checkers = ['go', 'gofmt', 'golint'] " Set our Go(lang) syntastic checkers
let g:syntastic_go_golint_args = "-min_confidence=0.3" " Set a lower minimum confidence than default on `golint`
"d√©sactive les erreurs de style
let g:syntastic_quiet_messages = { "type": "style" }
" let g:syntastic_quiet_messages = {'level': 'warnings'}
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"Easytags Options
"" Enable async operation
let g:easytags_async = 1

" Use project specific tags files (fall back to a global)
let g:easytags_dynamic_files = 1

" Language specific settings
let g:easytags_languages = {
            \   'php': {
            \     'cmd': 'ctags',
            \       'args': [],
            \       'fileoutput_opt': '-f',
            \       'stdout_opt': '-f-',
            \       'recurse_flag': '-R'
            \   }
            \}

"Abbrevs for running tag generation and tag update - tailored for php
abbrev generateTags !ctags -R --filter-terminator=php --exclude=node_modules  --exclude=vendor/phpunit --exclude=vendor/phpdocumentor --exclude=vendor/maximebf --exclude=storage
abbrev updateTags !ctags -a -R --filter-terminator=php --exclude=node_modules  --exclude=vendor/phpunit --exclude=vendor/phpdocumentor --exclude=vendor/maximebf --exclude=storage
"
"Automatically update tags on save - deps = vim-dispatch
autocmd BufWritePre .*php :Start!ctags -a -R --filter-terminator=php --exclude=node_modules  --exclude=vendor/phpunit --exclude=vendor/phpdocumentor --exclude=vendor/maximebf --exclude=storage 

" PHP-Vim-Namespace configuration and key-mappings
" inoremap <Leader>u <C-O>:call PhpInsertUse()<CR>
autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>
autocmd FileType php noremap <Leader>e :call PhpExpandClass()<CR>

" Function for ordering PHP use statements
function! OrderUseStatements ()
    " Save our undo file so that we can restore it after this function runs
    " This allows us to run this function without it being part of the history
    let tmpundofile = tempname()
    execute 'wundo! '. tmpundofile

    " Grab our cursor's current position
    let original_position = winsaveview()

    " Set our cursor position to the top so we can normalize our search results
    call setpos('.', [0, 0, 0, 0])

    " Search for our first and last use statements
    let first_use = search('\(^\|\r\|\n\)\s*use \(.\{-}\)\_s*;', 'n')
    let last_use = search('use \(.\{-}\)\_s*;\(\r\|\n\)*\([^use]\)', 'n')

    " Define our sort range
    let sort_range = first_use . ',' . last_use

    " Order our use statements based on our sort range
    execute sort_range . 'sort'

    " Restore our original cursor position
    call winrestview(original_position)

    " Restore our undo history
    silent! execute 'rundo ' . tmpundofile
    call delete(tmpundofile)
endfunction


" Automaticaly order `use` statements on save
autocmd FileType php autocmd BufWritePre <buffer> call OrderUseStatements()

"PHP Indent Options
let g:PHP_autoformatcomment = 1 " Format comments automatically
let g:PHP_vintage_case_default_indent = 1 " Use the older style of switch/case indentation


"COMPLETION
"------------------------------------
" Completion (no plugin) settings 
autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP
autocmd FileType php let php_sql_query=1
autocmd FileType php let php_htmlInStrings=1

" "YouCompleteMeConf
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_auto_trigger = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_register_as_syntastic_checker = 1
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_autoclose_preview_window_after_insertion = 1


" "Supertab & phpcomplete
let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" PHPComplete Options
" enables parsing docblock comments to generate helper
let g:phpcomplete_parse_docblock_comments = 1 
" caches the most used parts of the taglist
let g:phpcomplete_cache_taglists = 1
" better jump to definition 
let g:phpcomplete_enhance_jump_to_definition = 1
" commande de composer
let g:phpcomplete_index_composer_command='composer' 

"omni sur ctrl+@
inoremap <C-@> <C-x><C-o><C-o><C-p>

"Gestion des fenetres
"-------------------------
function! GetBufferList()
    redir =>buflist
    silent! ls!
    redir END
    return buflist
endfunction

function! ToggleList(bufname, pfx)
    let buflist = GetBufferList()
    for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
        if bufwinnr(bufnum) != -1
            exec(a:pfx.'close')
            return
        endif
    endfor
    if a:pfx == 'l' && len(getloclist(0)) == 0
        echohl ErrorMsg
        echo "Location List is Empty."
        return
    endif
    let winnr = winnr()
    exec(a:pfx.'open')
    if winnr() != winnr
        wincmd p
    endif
endfunction

nmap <silent> <leader>l :call ToggleList("Location List", 'l')<CR>
nmap <silent> <leader>e :call ToggleList("Quickfix List", 'c')<CR>

