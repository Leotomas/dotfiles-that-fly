"NeoBundle Scripts-----------------------------
if has('vim_starting')
    if &compatible
        set nocompatible               " Be iMproved
    endif

    " Required:
    set runtimepath+=/Users/leo/.nvim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('/Users/leo/.nvim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Add or remove your Bundles here:
NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'bling/vim-airline'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'gmist/vim-palette'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'tpope/vim-surround'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'ervandew/supertab'
NeoBundle 'anyakichi/vim-autoclose'
NeoBundle 'mileszs/ack.vim'
NeoBundle 'm2mdas/phpcomplete-extended'
NeoBundle 'vim-php/phpctags'
NeoBundle 'Rican7/php-doc-modded'
NeoBundle 'arnaud-lb/vim-php-namespace'
NeoBundle 'xolox/vim-easytags'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'xolox/vim-misc'
NeoBundle 'ntpeters/vim-better-whitespace'
NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }
NeoBundle 'ton/vim-bufsurf'

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------

filetype on
syntax on
set nowrap
set ignorecase
set smartcase
set number
set showmode
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
set guifont=Fira_Mono_for_Powerline:h10
set wildmode=longest,list,full
set wildmenu
set scrolloff=3
"set sidescrolloff = 5
"set sidescroll = 1
set ruler
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set copyindent
set linespace=12
set backspace=indent,eol,start
highlight Search cterm=underline
set visualbell
set noerrorbells
set hidden
set history=1000
set undolevels=1000
set title
set nobackup
set noswapfile

" stop using escape guys
imap jj <esc>
colorscheme atom-dark
set background=dark
let mapleader = ","
let g:mapleader = ","

"leader save
nmap <leader>w :w!<cr>
"leader quit
nmap <leader>q :q!<cr>


let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tagbar#enabled = 1
"let g:airline_powerline_fonts=1

map <C-b> :NERDTreeToggle<CR>

nmap <silent> <C-h> :wincmd h<CR>
nmap <silent> <C-l> :wincmd l<CR>
nmap <silent> <C-j> :wincmd j<CR>
nmap <silent> <C-k> :wincmd k<CR>


nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>

"go to definition hitting leader + tab in esc mode
nnoremap <leader><Tab> <C-]>
" Create split below
set splitbelow
set splitright
nmap :sp :rightbelow sp<cr>

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
  \}

let g:ctrlp_working_path_mode = 'r'

" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>b :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>

"toggle tagbar
nmap <leader>l :TagbarToggle<cr>

set showcmd

autocmd cursorhold * set nohlsearch
autocmd cursormoved * set hlsearch

"auto remove trailing spaces on save with php files
autocmd BufWritePre *.php :%s/\s\+$//e

nnoremap <leader><leader> <c-^>

" search is a bitch
nmap <silent> ,/ :nohlsearch<CR>

"when you forget to sudo
cmap w!! w !sudo tee % >/dev/null

"automatic vertical split shortcut
nnoremap <leader>s <C-w>v<C-w>l
" Create and edit file in the current dir
nmap :ed :edit %:p:h/

set tags+=./tags;/,./TAGS;/ " Recurse up the directory tree until finding a tags file
set tags+=./tags.vendor;/ " Add tag files for vendor dependencies, again with recursion up the tree

set laststatus=2
set statusline=%F%m%r%h%w\ (%{&ff}){%Y}\ [%l,%v][%p%%]

"BufSurf shortcuts
noremap <leader>< :bp<cr>
noremap <leader>> :bn<cr>

"save with ctrl+s
noremap  <c-s> :update<cr>
vnoremap <c-s> <c-c>:update<cr>
inoremap <c-s> <c-o>:update<cr><esc>

  "PHP DOC PLUGIN
  imap <C-o> <ESC>:set paste<CR>:call PhpDoc()<CR>:set nopaste<CR>

  "force ack.vim to use AG
  let g:ackprg = 'ag --nogroup --nocolor --column'

  "Syntastic stuff
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}

let g:syntastic_auto_loc_list = 1 " Automatically open and close the location list
let g:syntastic_php_checkers = ['php'] " PHP Linter, PHP Code Sniffer, PHP Mess Detector
let g:syntastic_php_phpcs_post_args = "--standard=PSR2" " Use the PSR-2 standard for PHP Code Sniffer
let g:syntastic_json_checkers = ['jsonlint'] " Use JSON linter
let g:syntastic_go_golint_args = "-min_confidence=0.3" " Set a lower minimum confidence than default on `golint`

 "Force php autocomplete to use supertab to chose item
  autocmd  FileType  php setlocal omnifunc=phpcomplete_extended#CompletePHP

  "supertab with tab
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" composer default command
let g:phpcomplete_index_composer_command = "/usr/local/bin/composer"

"php doc keystrokes
inoremap <C-o> <ESC>:call PhpDocSingle()<CR>i
nnoremap <C-o> :call PhpDocSingle()<CR>
vnoremap <C-o> :call PhpDocRange()<CR>

"Strip Whitespaces on save
autocmd BufWritePre * StripWhitespace


"easytags options
 "Enable async operation
let g:easytags_async = 1

" Use project specific tags files (fall back to a global)
let g:easytags_dynamic_files = 1

" Language specific settings
let g:easytags_languages = {
\   'php': {
\     'cmd': 'phpctags',
\       'args': [],
\       'fileoutput_opt': '-f',
\       'stdout_opt': '-f-',
\       'recurse_flag': '-R'
\   }
\}

" If 'ack' is installed, use it as the CtrlP indexer. :)
if (1 == executable('ack'))
    let g:ctrlp_user_command = 'ack -i --noenv --nocolor --nogroup -g "" %s'
endif

autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType make set noexpandtab
autocmd FileType json set ts=2 sts=2 sw=2
autocmd FileType gitcommit execute "set colorcolumn=51," . join(range(73,335), ',')
autocmd FileType go execute "set colorcolumn=81," . join(range(121,335), ',')

autocmd FileType php let php_sql_query=1
autocmd FileType php let php_htmlInStrings=1
autocmd FileType php let php_noShortTags=0
autocmd FileType php let php_folding=0

autocmd FileType php set makeprg=php\ -l\ %
autocmd FileType php set errorformat=%m\ in\ %f\ on\ line\ %l

autocmd FileType php execute "set colorcolumn=81," . join(range(121,335), ',')
