" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if &compatible
	set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/
set runtimepath+=~/Documents/projects/perso/dotfiles-that-fly/vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle "Shougo/unite.vim"
NeoBundle "Shougo/unite-outline"
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle "maxbrunsfeld/vim-yankstack"
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
" NeoBundle 'int3/vim-extradite'
NeoBundle 'tpope/vim-rhubarb'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'junegunn/fzf'
NeoBundle 'junegunn/fzf.vim'
" NeoBundle 'junegunn/vim-peekaboo'
NeoBundle 'tpope/vim-surround'
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'docunext/closetag.vim'
NeoBundle 'rhysd/clever-f.vim'
NeoBundle 'henrik/vim-indexed-search'
NeoBundle 'kshenoy/vim-signature'
NeoBundle 'gcmt/taboo.vim'
NeoBundle "scrooloose/nerdtree"
NeoBundle "ConradIrwin/vim-bracketed-paste"

" --------- Themes --------
NeoBundle "chriskempson/base16-vim"
NeoBundle "Nequo/vim-allomancer"
NeoBundle "rakr/vim-two-firewatch"
NeoBundle "NerdyPepper/vim-colors-plain"
NeoBundle "arcticicestudio/nord-vim"
NeoBundle "robertmeta/nofrils"
NeoBundle "ayu-theme/ayu-vim"
NeoBundle 'morhetz/gruvbox'
NeoBundle 'cocopon/iceberg.vim'
NeoBundle 'maralla/mycolor'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'Leotomas/vim-atom-dark'

NeoBundle 'rking/ag.vim'
NeoBundle "tomtom/tlib_vim"
NeoBundle "marcweber/vim-addon-mw-utils"
NeoBundle "garbas/vim-snipmate"
NeoBundle 'evidens/vim-twig'

" --------- JS --------- "
"NeoBundle "roxma/nvim-yarp"
NeoBundle 'jelera/vim-javascript-syntax'
" NeoBundle "Shougo/neocomplcache.vim"

" NeoBundleLazy 'maralla/completor.vim', {'autoload':{'filetypes':['javascript', 'vue']}}
" NeoBundleLazy 'posva/vim-vue', {'autoload':{'filetypes':['vue']}}
NeoBundleLazy 'w0rp/ale', {'autoload':{'filetypes':['javascript', 'vue', 'css', 'scss', 'sass']}}
NeoBundleLazy 'jelera/vim-javascript-syntax', {'autoload':{'filetypes':['javascript', 'vue']}}
NeoBundleLazy 'vim-scripts/JavaScript-Indent', {'autoload':{'filetypes':['javascript', 'vue']}}
NeoBundleLazy 'heavenshell/vim-jsdoc', {'autoload':{'filetypes':['javascript', 'vue']}}
NeoBundle "Sefima/vim-nearest-complete-improved"
" NeoBundleLazy 'ternjs/tern_for_vim', {'autoload':{'filetypes':['javascript', 'vue']}}


call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck


" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

set bg=dark
colo base16-eighties
" colo iceberg

set rtp+=~/.fz

syntax enable
set visualbell
set encoding=utf-8
" set t_Co=256
set term=screen-256color
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
if (has("termguicolors"))
    set termguicolors
endif
set noerrorbells
set ignorecase
set smartcase
set autoread
set hlsearch
set nonumber
set laststatus=2
set mouse=a
set backspace=indent,eol,start
set autoindent
set copyindent
highlight Search cterm=underline

set history=75
set undolevels=75
set title
set nobackup
set foldcolumn=1
set path+=**
" --- Tabs & indents
set tabstop=4
set shiftwidth=4
set expandtab
" set softtabstop=0
" set smarttab
" -- Clipboard
set clipboard=unnamedplus
" --- code wrapping
set wildmenu
set wildignore+=*/node_modules/*,*/vendor/*
set linespace=3

"Make vim faster
set nocursorcolumn      " Don't paint cursor column
set nocursorline
set lazyredraw          " Wait to redraw
set ttyfast
set scrolljump=8        " Scroll 8 lines at a time at bottom/top
let html_no_rendering=1 " Don't render italic, bold, links in HTML"
" keep folds between sessions
" :set sessionoptions+=folds
set viewoptions=cursor,folds,slash,unix
set fdm=indent
set fdc=4
set fdl=1
set nofen

" no buffer warning when unsaved
set hidden

set complete=.,b,u,]

let mapleader = ","
let g:mapleader = ","

"stop using escape guys
imap jj <esc>
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>
" close all splits except the one focused
"
nmap <leader>o :only<cr>
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>

nmap <leader>y <Plug>yankstack_substitute_older_paste
nmap <leader>Y <Plug>yankstack_substitute_new_paste
"
nnoremap <leader><space> :Buffer<cr>
nnoremap <leader>p :GFiles<cr>
" nnoremap <leader>f :Lines<cr>
nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
nnoremap <leader>s :syntax on <cr>

" Press leader f to toggle identation based folds
let g:auto_folds_toggle = 0
function! g:ToggleAutoFolds()
    if (g:auto_folds_toggle == 0)
        let g:auto_folds_toggle = 1
        set fen
    else
        let g:auto_folds_toggle = 0
        set nofen
    endif
endfunction
nmap<leader>f :call ToggleAutoFolds()<CR><CR>

" echo Ale's linter status in status line
function! LinterStatus() abort
let l:counts = ale#statusline#Count(bufnr(''))

let l:all_errors = l:counts.error + l:counts.style_error
let l:all_non_errors = l:counts.total - l:all_errors

return l:counts.total == 0 ? 'OK' : printf(
            \   '%dW %dE',
            \   all_non_errors,
            \   all_errors
            \)
endfunction



" minimal status line (displays git repo)
set statusline=%<%f=%{LinterStatus()}\ %h%m%r%=%{fugitive#statusline()}\ \ %-14.(%l,%c%V%)\%p%%

"---- Case Motions -----"
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge


"--- Nedtree ----"
nmap <C-b> :NERDTreeToggle<CR>
nmap <C-f> :NERDTreeFind<CR>


"------ Ale ------

" let g:ale_linters = {
"             \   'javascript': ['eslint', 'tcp://127.0.0.1:2089'],
"             \   'php': ['phpcs'],
"             \}
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_linter_aliases = {'vue': ['javascript', 'html', 'scss', 'eslint-plugin-vue']}

"---- Removes Trailing Spaces on save ----"
autocmd BufWritePre * %s/\s\+$//e

" --- auto set type is js for vue files ----
autocmd BufNewFile,BufRead *.vue set filetype=vue.javascript
 au BufNewFile,BufRead *.vue syntax sync fromstart


" --- Completor PHP trigger ---- "
"  referred : https://github.com/maralla/completor.vim/issues/24
" let g:completor_php_omni_trigger = '([$\w]+|use\s*|->[$\w]*|::[$\w]*|implements\s*|extends\s*|class\s+[$\w]+|new\s*)$'

abbrev ee e **

" --- JsDoc conf ---- "
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_access_descriptions = 1
let g:jsdoc_underscore_private = 1
let g:jsdoc_enable_es6 = 1
let g:jsdoc_allow_shorthand = 1

map <leader>d :JsDoc <cr>

" --- Completor ---"
let g:completor_min_chars=2
let g:completor_auto_trigger=0

" ---  Ale ----"
let g:ale_lint_on_save=1
let g:ale_lint_on_text_changed=0
let g:ale_lint_on_enter=1
let g:ale_lint_on_insert_leave=1

" let g:ale_statusline_format = ['⨉', '⚠', '⬥']
let g:ale_sign_error="⨉"
let g:ale_sign_warning="!"
let g:ale_sign_column_always = 1

" ---- FZF ---- "
"let $FZF_DEFAULT_COMMAND = 'ag -l -g "'"

"Tagbag
let g:tagbar_ctags_bin='/usr/bin/ctags-exuberant'

"Validation d'un JSON -> leader jv
abbrev validateJson :%!jq .
abbrev validatejson :%!jq .
noremap <leader>jv :%!jq .<cr>

abbrev eslintfix !node node_modules/eslint/bin/eslint.js --fix %
abbrev eslint !node node_modules/eslint/bin/eslint.js  %

abbrev clearswaps !rm ~/.vim/swap/*

" augroup vimrc_autocmds
"   autocmd BufEnter * highlight OverLength ctermbg=darkgrey guibg=#111111
"   autocmd BufEnter * match OverLength /\%80v.*/
" augroup END

" let g:LanguageClient_serverCommands = {
"     \ 'javascript': ['tcp://127.0.0.1:2089'],
"     \ 'vue': ['vls']
"     \ }
" map <leader>m :call LanguageClient_contextMenu()<CR>


" Or map each action separately
" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

"Persistent folds
" augroup remember_folds
"   autocmd!
"   au BufWinLeave ?* mkview 1
"   au BufWinEnter ?* silent! loadview 1
" augroup END


" let g:deoplete#enable_at_startup = 1
" let g:deoplete#enable_buffer_path = 1

" Completion des fichiers filepath '../' -> Ctrl+F pour trigger en insert mode
autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)
inoremap <C-f> <C-x><C-f>


" remap backtick - french keyboard
" does not work with cs (surround.vim)
" inoremap <leader>è `



"  used with Sefima/vim-nearest-complete-improved
set completefunc=NearestComplete
set completeopt=menu
inoremap <silent><expr> <C-n>      pumvisible() ? "\<C-n>" : "\<C-x><C-u>"
imap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
imap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
