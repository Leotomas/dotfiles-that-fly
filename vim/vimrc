" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

if &compatible
	set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/
set runtimepath+=~/Documents/projects/perso/dotfiles-that-fly/vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'tpope/vim-pathogen'
NeoBundle "Shougo/unite.vim"
NeoBundle "neoclide/vim-node-rpc"
NeoBundle "Shougo/unite-outline"
" NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle "maxbrunsfeld/vim-yankstack"
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'jreybert/vimagit'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'cohama/agit.vim' " :Agit browse commits
" NeoBundle 'int3/vim-extradite'
NeoBundle 'christoomey/vim-conflicted'
NeoBundle 'tpope/vim-rhubarb'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'junegunn/fzf'
NeoBundle 'junegunn/fzf.vim'
NeoBundle 'junegunn/vim-peekaboo'
NeoBundle 'tpope/vim-surround'
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'docunext/closetag.vim'
NeoBundle 'rhysd/clever-f.vim'
NeoBundle 'henrik/vim-indexed-search'
NeoBundle 'kshenoy/vim-signature'
NeoBundle 'gcmt/taboo.vim'
NeoBundle "scrooloose/nerdtree"
NeoBundle "ConradIrwin/vim-bracketed-paste"

" Waka Waka hehe
NeoBundle "wakatime/vim-wakatime"

" --------- Themes --------
NeoBundle "chriskempson/base16-vim"
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'Leotomas/vim-atom-dark'
NeoBundle 'pgdouyon/vim-alayas'
NeoBundle 'wolf-dog/nighted.vim'
NeoBundle 'jacoborus/tender.vim'
NeoBundle 'andreypopp/vim-colors-plain'
NeoBundle 'sjl/badwolf'
NeoBundle "balanceiskey/vim-framer-syntax"
" NeoBundle 'fxn/vim-monochrome'
NeoBundle 'Lokaltog/vim-monotone'
NeoBundle 'owickstrom/vim-colors-paramount'
NeoBundle 'hauleth/blame.vim'
NeoBundle 'atelierbram/Base2Tone-vim'
NeoBundle 'sainnhe/vim-color-forest-night'
NeoBundle 'sainnhe/vim-color-vanilla-cake'

NeoBundle 'rking/ag.vim'
NeoBundle "tomtom/tlib_vim"
NeoBundle "marcweber/vim-addon-mw-utils"
NeoBundle "garbas/vim-snipmate"
NeoBundle 'evidens/vim-twig'
NeoBundle 'thaerkh/vim-workspace'


"--- Markdown & writing ----
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'junegunn/goyo.vim'
NeoBundle "iamcco/markdown-preview.nvim"

" --------- JS --------- "
NeoBundle 'jelera/vim-javascript-syntax'

NeoBundleLazy 'w0rp/ale', {'autoload':{'filetypes':['javascript', 'vue', 'css', 'scss', 'sass']}}
NeoBundleLazy 'jelera/vim-javascript-syntax', {'autoload':{'filetypes':['javascript', 'vue']}}
NeoBundleLazy 'vim-scripts/JavaScript-Indent', {'autoload':{'filetypes':['javascript', 'vue']}}
NeoBundleLazy 'heavenshell/vim-jsdoc', {'autoload':{'filetypes':['javascript', 'vue']}}

NeoBundle "Sefima/vim-nearest-complete-improved"

" NeoBundle "neoclide/coc.nvim"
" NeoBundle "ludovicchabant/vim-gutentags"

NeoBundle 'chrisbra/Colorizer'

NeoBundle 'nelstrom/vim-visual-star-search'

" ----- PlantUML preview ---- "
NeoBundle "aklt/plantuml-syntax"
NeoBundle "tyru/open-browser.vim"
NeoBundle "weirongxu/plantuml-previewer.vim"

" NeoBundle "tpope/vim-scriptease"
"
" ----- Powershell  --- "
NeoBundle "PProvost/vim-ps1"

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck


" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

set bg=dark
" colo paramount
" colo Base2Tone_ForestDark
colo base16-ashes
" colo tender

set rtp+=~/.fz

syntax enable
set visualbell
set encoding=utf-8
" set t_Co=256
set term=screen-256color
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
if (has("termguicolors"))
    set termguicolors
endif
set noerrorbells
set ignorecase
set smartcase
set autoread
set hlsearch
set nonumber
set laststatus=2
set mouse=a
set backspace=indent,eol,start
set autoindent
set copyindent
highlight Search cterm=underline

set history=75
set undolevels=75
set title
set nobackup
set path+=**
" --- Tabs & indents
set tabstop=4
set shiftwidth=4
set expandtab
" set softtabstop=0
" set smarttab
" -- Clipboard
set clipboard=unnamedplus
" --- code wrapping
set wildmenu
set wildignore+=*/node_modules/*,*/vendor/*
set linespace=3

"Make vim faster
set nocursorcolumn      " Don't paint cursor column
set nocursorline
set lazyredraw          " Wait to redraw
set ttyfast
set scrolljump=8        " Scroll 8 lines at a time at bottom/top
let html_no_rendering=1 " Don't render italic, bold, links in HTML"
" keep folds between sessions
" :set sessionoptions+=folds
set viewoptions=cursor,folds,slash,unix
set fdm=manual
set foldcolumn=1
set fdl=1
set nofen
set formatoptions+=j " Delete comment character when joining commented lines"

" no buffer warning when unsaved plop
set hidden

" set complete=.,b,u,]
let mapleader = ","
let g:mapleader = ","

"stop using escape guys
imap jj <esc>
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>
" close all splits except the one focused
"
nmap <leader>o :only<cr>
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
set undofile
nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>

nmap <leader>y <Plug>yankstack_substitute_older_paste
nmap <leader>Y <Plug>yankstack_substitute_new_paste
"
nnoremap <leader><space> :Buffer<cr>
nnoremap <leader>p :GFiles<cr>
nnoremap <leader>l :Lines<cr>
nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
nnoremap <leader>s :syntax on <cr>

" Press leader f to toggle identation based folds
" let g:auto_folds_toggle = 0
" function! g:ToggleAutoFolds()
"     if (g:auto_folds_toggle == 0)
"         let g:auto_folds_toggle = 1
"         set fen
"     else
"         let g:auto_folds_toggle = 0
"         set nofen
"     endif
" endfunction
" nmap<leader>f :call ToggleAutoFolds()<CR><CR>

" echo Ale's linter status in status line
function! LinterStatus() abort
let l:counts = ale#statusline#Count(bufnr(''))

let l:all_errors = l:counts.error + l:counts.style_error
let l:all_non_errors = l:counts.total - l:all_errors

return l:counts.total == 0 ? 'OK' : printf(
            \   '%d⚠  %d⨉ ',
            \   all_non_errors,
            \   all_errors
            \)
endfunction

" minimal status line (displays git repo)
" set statusline=%<%f=%{LinterStatus()}\ %h%m%r%=%{fugitive#statusline()}\ \ %-14.(%l,%c%V%)\%p%%%{gutentags#statusline()}
set statusline=%<%f=%{LinterStatus()}\ %h%m%r%=%{fugitive#statusline()}\ \ %-14.(%l,%c%V%)\%p%%

"---- Case Motions -----"
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge

"--- Nedtree ----"
nmap <C-b> :NERDTreeToggle<CR>
nmap <C-f> :NERDTreeFind<CR>

let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_linter_aliases = {'vue': ['javascript', 'html', 'scss', 'eslint-plugin-vue']}

"---- Removes Trailing Spaces on save ----"
autocmd BufWritePre * %s/\s\+$//e

" --- auto set type is js for vue files ----
autocmd BufNewFile,BufRead *.vue set filetype=vue.javascript
 au BufNewFile,BufRead *.vue syntax sync fromstart

abbrev ee e **

" --- JsDoc conf ---- "
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_access_descriptions = 1
let g:jsdoc_underscore_private = 1
let g:jsdoc_enable_es6 = 1
let g:jsdoc_tags = {} | let g:jsdoc_tags['returns'] = 'return'

map <leader>d :JsDoc <cr>

" ---  Ale ----"
let g:ale_lint_on_save=1
let g:ale_lint_on_text_changed=0
let g:ale_lint_on_enter=1
let g:ale_lint_on_insert_leave=1

" let g:ale_statusline_format = ['⨉', '⚠', '⬥']
let g:ale_sign_error="⨉"
let g:ale_sign_warning="!"
let g:ale_sign_column_always = 1

nnoremap <leader>ar :ALELint<CR>
nnoremap <leader>aa :ALELint<CR>
nnoremap <leader>ae :ALEEnable<CR>
nnoremap <leader>ad :ALEDisable<CR>

"Tagbag
" let g:tagbar_ctags_bin='/usr/bin/ctags-exuberant'

"Validation d'un JSON -> leader jv
abbrev validateJson :%!jq .
abbrev validatejson :%!jq .
abbrev vjson validatejson
noremap <leader>jv :%!jq .<cr>

" abbrev eslintfix !node node_modules/eslint/bin/eslint.js --fix %
" abbrev eslint !node node_modules/eslint/bin/eslint.js  %

" whenever vim crashes it's handy to delete swaps
abbrev clearswaps !rm ~/.vim/swap/*
abbrev dswaps clearswaps
abbrev cswaps clearswaps

" Completion des fichiers filepath '../' -> Ctrl+F pour trigger en insert mode
autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)
inoremap <C-f> <C-x><C-f>

"  used with Sefima/vim-nearest-complete-improved
set completefunc=NearestComplete
set completeopt=menu
set complete=.,w,b,u,t,i,kspell

inoremap <silent><expr> <C-n>      pumvisible() ? "\<C-n>" : "\<C-x><C-u>"
" IMAP <EXpr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"
" imap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
" imap <expr> <ESC>       pumvisible() ? "\<C-y><ESC>" : "\<ESC>"

" leader tn -> tab new tmux like
noremap <leader>tc :tabnew<CR>
noremap <leader>tx :tabclose<CR>

" vim workspace
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
noremap <leader>chb :CloseHiddenBuffers<CR>
noremap <leader>tw :ToggleWorkspace<CR>

" magit & git
noremap <leader>ga. :!git add .<CR><CR>
noremap <leader>gs :Gstatus<CR>
noremap <leader>gc :Gcommit<CR>

" Spelling / Orthographe
let g:c_spelllang = "fr"
let &spelllang=g:c_spelllang
function! AlternateSpellLang()
    if (g:c_spelllang == "fr")
        let g:c_spelllang = "en_us"
    elseif (g:c_spelllang == "en_us")
        let g:c_spelllang = "en_us,fr"
    elseif (g:c_spelllang == "en_us,fr")
        let g:c_spelllang = "fr"
    endif
    echo "spelllang is now " . g:c_spelllang
    let &spelllang=g:c_spelllang
endfunction

nnoremap <leader>ks :set spell!<CR>
nnoremap <leader>kk :set spell!<CR>
nnoremap <leader>kn :call AlternateSpellLang()<CR><CR>

" fast command launch
nnoremap <leader>! :!

" vim conflicted
set stl+=%{ConflictedVersion()}

noremap <leader>cn ]c
noremap <leader>cp [c

" vim-markdown
let g:mkdp_command_for_global = 1


" ==== Coc.vim ====
set updatetime=300
set noshowmode

" remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" inoremap <silent><expr> <C-n>
"             \ pumvisible() ? "\<C-n>" :
"             \ <SID>check_back_space() ? "\<C-n>" :
"             \ coc#refresh()


" --- plantUML previewer for WSL ---- "
 g:plantuml_previewer#plantuml_jar_path="/usr/bin/plantuml.jar"

 command! PlantumlOpenCustom call PreviewPlantUML(1)
 command! PlantumlSaveCustom call PreviewPlantUML(0)
 command! PlantumlClearFolder call ClearPlantumlFolder()

 function! g:PreviewPlantUML(preview)
     let l:stamp = strftime('%s000')
     let l:base_path = "~/Leo/plantuml/" . stamp . "/"
     let l:file_url = "file:///C:/Users/Leo/plantuml/" . l:stamp . "/dist/index.html"

     execute ":PlantumlOpen"
     sleep 3500m
     execute "! cp -R ~/.vim/bundle/plantuml-previewer.vim/viewer " . l:base_path
     if a:preview
         execute ":OpenBrowser " . l:file_url
     endif
 endfunction

 function! g:ClearPlantumlFolder()
     execute "rm -r -f ~/Leo/plantuml/*"
 endfunction

 nmap <leader>pus :PlantumlSaveCustom<CR><CR>
 nmap <leader>puo :PlantumlOpenCustom<CR><CR>





