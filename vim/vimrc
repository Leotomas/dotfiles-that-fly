
if 0 | endif

if &compatible
 set nocompatible " Be iMproved
endif

call plug#begin("~/.vim/plugged")

Plug 'tpope/vim-pathogen'
Plug 'Shougo/unite.vim'
Plug 'neoclide/vim-node-rpc'
Plug 'Shougo/unite-outline'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'tpope/vim-fugitive'
Plug 'jreybert/vimagit'
Plug 'airblade/vim-gitgutter'
Plug 'terryma/vim-multiple-cursors'
Plug 'cohama/agit.vim' " :Agit browse commits
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-commentary'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'tpope/vim-surround'
Plug 'bkad/CamelCaseMotion'
Plug 'tpope/vim-eunuch'
Plug 'Raimondi/delimitMate'
Plug 'docunext/closetag.vim'
Plug 'rhysd/clever-f.vim'
Plug 'henrik/vim-indexed-search'
Plug 'dyng/ctrlsf.vim'
" shows maks in gutter
Plug 'kshenoy/vim-signature'
Plug 'gcmt/taboo.vim'
Plug 'scrooloose/nerdtree'
Plug 'ryanoasis/vim-devicons'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'tpope/vim-repeat'

" --------- Themes --------
Plug 'Leotomas/vim-atom-dark'

Plug 'tomtom/tlib_vim'
Plug 'marcweber/vim-addon-mw-utils'
Plug 'garbas/vim-snipmate'
Plug 'evidens/vim-twig'
Plug 'thaerkh/vim-workspace'
Plug 'jremmen/vim-ripgrep'
Plug 'luochen1990/rainbow'

"--- Markdown & writing ----
Plug 'pbrisbin/vim-mkdir'
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'junegunn/goyo.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}

" Plug 'vimwiki/vimwiki'

" --------- JS --------- "
Plug 'jelera/vim-javascript-syntax'

Plug 'jelera/vim-javascript-syntax', {'autoload':{'filetypes':['javascript', 'vue']}}
Plug 'vim-scripts/JavaScript-Indent', {'autoload':{'filetypes':['javascript', 'vue']}}
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'heavenshell/vim-jsdoc', {'autoload':{'filetypes':['javascript', 'vue']}}
Plug 'segeljakt/vim-stealth'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'chrisbra/Colorizer'
Plug 'sjl/splice.vim'

Plug 'nelstrom/vim-visual-star-search'

" ----- PlantUML preview ---- "
Plug 'aklt/plantuml-syntax'
Plug 'tyru/open-browser.vim'
Plug 'weirongxu/plantuml-previewer.vim'

" ----- Powershell --- "
Plug 'PProvost/vim-ps1'

call plug#end()

set rtp+=~/.fz

syntax enable
set visualbell
set encoding=utf-8

" set t_Co=256
set term=screen-256color
set t_ut=
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
if (has("termguicolors"))
 set termguicolors
endif

colo atom-dark
set fillchars+=vert:â”‚

set noerrorbells
set ignorecase
set smartcase
set autoread
set hlsearch
set nonumber
set laststatus=2
set mouse=a
set backspace=indent,eol,start
set autoindent
set copyindent
highlight Search cterm=underline
set tabpagemax=250
set history=75
set undolevels=75
set title
set nobackup
set nowritebackup
set path+=**
" --- Tabs & indents
set tabstop=2
set shiftwidth=2
set expandtab
" -- Clipboard
set clipboard=unnamedplus
" --- code wrapping
set wildmenu
set wildignore+=*/node_modules/*,*/vendor/*
set linespace=3

"Make vim faster
set nocursorcolumn " Don't paint cursor column
set nocursorline
set lazyredraw " Wait to redraw
set ttyfast
set scrolljump=8 " Scroll 8 lines at a time at bottom/top
let html_no_rendering=1 " Don't render italic, bold, links in HTML"
" keep folds between sessions
" :set sessionoptions+=folds
set viewoptions=cursor,folds,slash,unix
set fdm=manual
set foldcolumn=1
set fdl=1
set nofen
set formatoptions+=j " Delete comment character when joining commented lines"

" no buffer warning when unsaved
set hidden

" clipboard unnamedplus breaks paste in visual mode
nnoremap <leader>= :BeautifyTs<CR>

" set complete=.,b,u,]
let mapleader = ","
let g:mapleader = ","
let maplocalleader=","
let g:maplocalleader=","

"stop using escape guys
imap jj <esc>
nmap <leader>w :w!<cr>
nmap <leader>q :q!<cr>
" close all splits except the one focused
"
nmap <leader>o :only<cr>
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
set undofile
nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>

if has("patch-8.1.1564")
 " Recently vim can merge signcolumn and number column into one
 set signcolumn=number
else
 set signcolumn=yes
endif

nnoremap <leader>gg :GitGutterSignsToggle<CR>
let g:gitgutter_signs=0

nmap <leader>yy <Plug>yankstack_substitute_older_paste
nmap <leader>yp <Plug>yankstack_substitute_new_paste
"
nnoremap <leader><space> :Buffer<cr>
nnoremap <leader>p :GFiles<cr>
nnoremap <leader>l :Lines<cr>
" nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
nnoremap <leader>s :syntax on <cr>
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
set number
set relativenumber

" Press leader f to toggle identation based folds
" let g:auto_folds_toggle = 0
" function! g:ToggleAutoFolds()
" if (g:auto_folds_toggle == 0)
" let g:auto_folds_toggle = 1
" set fen
" else
" let g:auto_folds_toggle = 0
" set nofen
" endif
" endfunction
" nmap<leader>f :call ToggleAutoFolds()<CR><CR>

" minimal status line (displays git repo)
" set statusline=%<%f=%{LinterStatus()}\ %h%m%r%=%{fugitive#statusline()}\ \ %-14.(%l,%c%V%)\%p%%%{gutentags#statusline()}
" Your vimrc
function! GitStatus()
 let [a,m,r] = GitGutterGetHunkSummary()
 return printf('+%d ~%d -%d', a, m, r)
endfunction
set statusline=%<%f\ [%{GitStatus()}]\ %h%m%r%=%{fugitive#statusline()}\ \ %-14.(%l,%c%V%)\%p%%

"---- Case Motions -----"
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge

"--- Nerdtree ----"
nmap <C-b> :NERDTreeToggle<CR>
nmap <C-f> :NERDTreeFind<CR>
let NERDTreeShowHidden=1

"---- White spaces ----"
" Removes Trailing Spaces on save
autocmd BufWritePre * %s/\s\+$//e

" --- auto set type is js for vue files ----
autocmd BufNewFile,BufRead *.vue set filetype=vue.javascript
 au BufNewFile,BufRead *.vue syntax sync fromstart

autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx
autocmd BufNewFile,BufRead *.jsx set filetype=typescript.tsx

" --- JsDoc conf ---- "
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_access_descriptions = 1
let g:jsdoc_underscore_private = 1
let g:jsdoc_enable_es6 = 1
let g:jsdoc_tags = {} | let g:jsdoc_tags['returns'] = 'return'

map <leader>d :JsDoc <cr>

"Validation d'un JSON -> leader jv
abbrev validateJson :%!jq .
abbrev validatejson :%!jq .
abbrev vjson validatejson
noremap <leader>jv :%!jq .<cr>

" whenever vim crashes it's handy to delete swaps
abbrev clearswaps !rm ~/.vim/swap/*
abbrev dswaps clearswaps
abbrev cswaps clearswaps

inoremap <silent><expr> <C-n> pumvisible() ? "\<C-n>" : "\<C-x><C-u>"

" leader tn -> tab new tmux like
noremap <leader>tc :tabnew<CR>
noremap <leader>tx :tabclose<CR>

" vim workspace
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
noremap <leader>chb :CloseHiddenBuffers<CR>
noremap <leader>tw :ToggleWorkspace<CR>

" magit & git
noremap <leader>ga. :!git add .<CR><CR>
noremap <leader>gs :Gstatus<CR>
noremap <leader>gc :Gcommit<CR>

" Spelling / Orthographe
let g:c_spelllang = "fr"
let &spelllang=g:c_spelllang
function! AlternateSpellLang()
 if (g:c_spelllang == "fr")
 let g:c_spelllang = "en_us"
 elseif (g:c_spelllang == "en_us")
 let g:c_spelllang = "en_us,fr"
 elseif (g:c_spelllang == "en_us,fr")
 let g:c_spelllang = "fr"
 endif
 echo "spelllang is now " . g:c_spelllang
 let &spelllang=g:c_spelllang
endfunction

nnoremap <leader>ks :set spell!<CR>
nnoremap <leader>kk :set spell!<CR>
nnoremap <leader>kn :call AlternateSpellLang()<CR><CR>

" fast command launch
nnoremap <leader>! :!
noremap <leader>cn ]c
noremap <leader>cp [c

" vim-markdown
let g:mkdp_command_for_global = 1

" ==== Coc.vim ====
set updatetime=300
set noshowmode

" remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
inoremap <silent><expr> <c-space> coc#refresh()
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
 if (index(['vim','help'], &filetype) >= 0)
 execute 'h '.expand('<cword>')
 else
 call CocAction('doHover')
 endif
endfunction
nmap <leader>R <Plug>(coc-rename)
nmap <leader>r :CocList outline<CR>
" Formatting selected code.
nmap <leader>ca :CocAction <CR>
nnoremap <silent><nowait> <leader>cd  :<C-u>CocList --normal diagnostics<cr>
hi Spellbad term=reverse ctermfg=0 ctermbg=0 guifg=#1C2023 guibg=#C7AE95

" --- plantUML previewer for WSL ---- "
" T:plantuml_previewer#plantuml_jar_path="/usr/bin/plantuml.jar"

 command! PlantumlOpenCustom call PreviewPlantUML(1)
 command! PlantumlSaveCustom call PreviewPlantUML(0)
 command! PlantumlClearFolder call ClearPlantumlFolder()

 " --- Toggle Gdiff with gutter signs "
 command! -nargs=1 Ggdiff call DisplayDiff(<f-args>)
 command! Ggdiffm call DisplayDiff("origin/master")

 function! g:DisplayDiff(rev)
   execute ":Gvdiff " . a:rev
   let g:gitgutter_diff_base= "'" . a:rev . "'"
   execute ":GitGutterSignsEnable"
 endfunction

abbrev ggdif Ggdiff

 function! g:PreviewPlantUML(preview)
   let l:stamp = strftime('%s000')
   let l:base_path = "~/Leo/plantuml/" . stamp . "/"
   let l:file_url = "file:///C:/Users/Leo/plantuml/" . l:stamp . "/dist/index.html"

   execute ":PlantumlOpen"
   sleep 3500m
   execute "! cp -R ~/.vim/bundle/plantuml-previewer.vim/viewer " . l:base_path
   if a:preview
     execute ":OpenBrowser " . l:file_url
   endif
 endfunction

 function! g:ClearPlantumlFolder()
   execute "rm -r -f ~/Leo/plantuml/*"
 endfunction

nmap <leader>pus :PlantumlSaveCustom<CR><CR>
nmap <leader>puo :PlantumlOpenCustom<CR><CR>

function! g:Beautify()
 :call CocAction('runCommand', 'tsserver.organizeImports')
 :call CocAction('runCommand', 'tsserver.executeAutofix')
 :call CocAction('runCommand', 'prettier.formatFile')
endfunction
command! BeautifyTs call Beautify()
nnoremap <leader>= :BeautifyTs<CR>

nnoremap <leader>fi :Rg<space>

" WSL yank support
let s:clip = '/mnt/c/Windows/System32/clip.exe' " change this path according to your mount point
if executable(s:clip)
 augroup WSLYank
 autocmd!
 autocmd TextYankPost * if v:event.operator ==# 'y' | call system(s:clip, @0) | endif
 augroup END
endif

" force reload buffer
nnoremap <leader>e :edit!<CR>

" vim splice 3-way & merging stuff
let g:splice_initial_layout_grid=1
let g:splice_initial_diff_grid=1
abbrev dgR diffget REMOTE
abbrev dgL diffget LOCAL

" some spelling mistakes
abbrev ocurrence occurrence
abbrev occurrence occurrence

" colors for vimdiff
hi DiffAdd      ctermfg=NONE          ctermbg=Green
hi DiffChange   ctermfg=NONE          ctermbg=NONE
hi DiffDelete   ctermfg=LightBlue     ctermbg=Red
hi DiffText     ctermfg=Yellow        ctermbg=Red

hi DiffText     ctermfg=Yellow        ctermbg=Red

" WIKI config LEADER N
map <silent><leader>nn :edit ~/wiki/index.md<CR>
map <silent> <leader>np :FZF ~/wiki<cr>
map <leader>nfi :Rg ~/wiki <Left><Left><Left><Left><Left><Left><Left><Left><Space>
let g:vim_markdown_autowrite = 1

command! -nargs=* Zet call Zettel(<f-args>)

func! Zettel(...)

  " build the file name
  let l:sep = ''
  if len(a:000) > 0
    let l:sep = '-'
  endif
  let l:fname = expand('~/wiki/') . strftime("%F-%H%M") .  l:sep . join(a:000, '-') . '.md'

  " edit the new file
  exec "e " . l:fname

  " enter the title and timestamp (using ultisnips) in
  " the new file
  if len(a:000) > 0
    exec "normal ggO\<c-r>=strftime('%Y-%m-%d %H:%M')\<cr> " . join(a:000) . "\<cr>\<esc>G"
  else
    exec "normal ggO\<c-r>=strftime('%Y-%m-%d %H:%M')\<cr>\<cr>\<esc>G"
  endif
endfunc

command Scratch call Scratchpad()

func! Scratchpad()
  exec "e ~/.scratchpad.txt"
  exec "normal Go\<esc>o\<esc>$i=====>\<space>\<esc>"
  exec "normal a\<c-r>=strftime('%Y-%m-%d %H:%M')\<cr>\<cr>\<esc>G"
endfunc

" :w!! to save as sudo
cmap w!! w !sudo tee % >/dev/null

" p to preview, o/enter to open
nmap <leader>a :CtrlSF -R ""<Left>
nmap <leader>A <Plug>CtrlSFCwordPath -W<CR><Plug>CtrlSFFocus<CR>

nmap // :BLines!<CR>

" Shows Git history for the current buffer
command! FileHistory execute ":BCommits!"
